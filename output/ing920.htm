<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\ing920.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\ing920.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Mon Jul 29 16:35:16 2024
<BR><P>
<H3>Maximum Stack Usage =        384 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
KeyScan_IRQHandler &rArr; key_scan_check &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[21]">ACTCNT32K_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">ACTCNT32K_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[21]">ACTCNT32K_IRQHandler</a> from startup_ing920.o(.text) referenced from startup_ing920.o(RESET)
 <LI><a href="#[13]">APBSPI_IRQHandler</a> from startup_ing920.o(.text) referenced from startup_ing920.o(RESET)
 <LI><a href="#[2b]">ASDM_IRQHandler</a> from pdm.o(i.ASDM_IRQHandler) referenced from startup_ing920.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_ing920.o(.text) referenced from startup_ing920.o(RESET)
 <LI><a href="#[a]">CacheI_IRQHandler</a> from startup_ing920.o(.text) referenced from startup_ing920.o(RESET)
 <LI><a href="#[19]">DMA_IRQHandler</a> from pdm.o(i.DMA_IRQHandler) referenced from startup_ing920.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_ing920.o(.text) referenced from startup_ing920.o(RESET)
 <LI><a href="#[d]">GPIO0_IRQHandler</a> from gpio.o(i.GPIO0_IRQHandler) referenced from startup_ing920.o(RESET)
 <LI><a href="#[c]">GPIO1_IRQHandler</a> from startup_ing920.o(.text) referenced from startup_ing920.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from main.o(i.HardFault_Handler) referenced from startup_ing920.o(RESET)
 <LI><a href="#[18]">I2C0_IRQHandler</a> from iic_master_920.o(i.I2C0_IRQHandler) referenced from startup_ing920.o(RESET)
 <LI><a href="#[29]">I2S_IRQHandler</a> from startup_ing920.o(.text) referenced from startup_ing920.o(RESET)
 <LI><a href="#[b]">KeyScan_IRQHandler</a> from keyscan_normal.o(i.KeyScan_IRQHandler) referenced from startup_ing920.o(RESET)
 <LI><a href="#[10]">LLEERR_IRQHandler</a> from startup_ing920.o(.text) referenced from startup_ing920.o(RESET)
 <LI><a href="#[11]">LLEFUN_IRQHandler</a> from startup_ing920.o(.text) referenced 2 times from startup_ing920.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_ing920.o(.text) referenced from startup_ing920.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_ing920.o(.text) referenced from startup_ing920.o(RESET)
 <LI><a href="#[26]">PMUPDR_IRQHandler</a> from startup_ing920.o(.text) referenced from startup_ing920.o(RESET)
 <LI><a href="#[25]">PMUPVD_IRQHandler</a> from startup_ing920.o(.text) referenced from startup_ing920.o(RESET)
 <LI><a href="#[20]">POW_CS_IRQHandler</a> from startup_ing920.o(.text) referenced from startup_ing920.o(RESET)
 <LI><a href="#[22]">PWM0_IRQHandler</a> from pwm.o(i.PWM0_IRQHandler) referenced from startup_ing920.o(RESET)
 <LI><a href="#[23]">PWM1_IRQHandler</a> from startup_ing920.o(.text) referenced from startup_ing920.o(RESET)
 <LI><a href="#[27]">PWM2_IRQHandler</a> from startup_ing920.o(.text) referenced from startup_ing920.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_ing920.o(.text) referenced from startup_ing920.o(RESET)
 <LI><a href="#[1d]">QDEC0_IRQHandler</a> from startup_ing920.o(.text) referenced from startup_ing920.o(RESET)
 <LI><a href="#[1c]">QDEC1_IRQHandler</a> from startup_ing920.o(.text) referenced from startup_ing920.o(RESET)
 <LI><a href="#[1b]">QDEC2_IRQHandler</a> from startup_ing920.o(.text) referenced from startup_ing920.o(RESET)
 <LI><a href="#[14]">QSPI_IRQHandler</a> from spi_flash.o(i.QSPI_IRQHandler) referenced from startup_ing920.o(RESET)
 <LI><a href="#[24]">RCMFDTRIM_IRQHandler</a> from r_timer.o(i.RCMFDTRIM_IRQHandler) referenced from startup_ing920.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_ing920.o(.text) referenced from startup_ing920.o(RESET)
 <LI><a href="#[15]">SADC_IRQHandler</a> from startup_ing920.o(.text) referenced from startup_ing920.o(RESET)
 <LI><a href="#[12]">SPIFlash_IRQHandler</a> from startup_ing920.o(.text) referenced from startup_ing920.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_ing920.o(.text) referenced from startup_ing920.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from timer_delay.o(i.SysTick_Handler) referenced from startup_ing920.o(RESET)
 <LI><a href="#[2a]">TBCU_IRQHandler</a> from startup_ing920.o(.text) referenced from startup_ing920.o(RESET)
 <LI><a href="#[e]">TIMER0_IRQHandler</a> from timer_pte.o(i.TIMER0_IRQHandler) referenced from startup_ing920.o(RESET)
 <LI><a href="#[28]">TIMER1_IRQHandler</a> from timer_pte.o(i.TIMER1_IRQHandler) referenced from startup_ing920.o(RESET)
 <LI><a href="#[1a]">TRNG_IRQHandler</a> from startup_ing920.o(.text) referenced from startup_ing920.o(RESET)
 <LI><a href="#[17]">UART0_IRQHandler</a> from uart.o(i.UART0_IRQHandler) referenced from startup_ing920.o(RESET)
 <LI><a href="#[16]">UART1_IRQHandler</a> from startup_ing920.o(.text) referenced from startup_ing920.o(RESET)
 <LI><a href="#[1e]">USB_IRQHandler</a> from startup_ing920.o(.text) referenced from startup_ing920.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_ing920.o(.text) referenced from startup_ing920.o(RESET)
 <LI><a href="#[f]">WDT_IRQHandler</a> from startup_ing920.o(.text) referenced from startup_ing920.o(RESET)
 <LI><a href="#[1f]">XOREADY_IRQHandler</a> from startup_ing920.o(.text) referenced from startup_ing920.o(RESET)
 <LI><a href="#[2d]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_ing920.o(.text)
 <LI><a href="#[2e]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[2c]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[2d]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_ing920.o(.text)
</UL>
<P><STRONG><a name="[9f]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[2f]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[40]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[a0]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[a1]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[a2]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[a3]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[a4]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[a5]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_ing920.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ing920.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_ing920.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ing920.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_ing920.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ing920.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_ing920.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ing920.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_ing920.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ing920.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_ing920.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ing920.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_ing920.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ing920.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_ing920.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ing920.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>ACTCNT32K_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ing920.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTCNT32K_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTCNT32K_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ing920.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>APBSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ing920.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ing920.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>CacheI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ing920.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ing920.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>GPIO1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ing920.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ing920.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ing920.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ing920.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>LLEAES_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ing920.o(.text), UNUSED)

<P><STRONG><a name="[10]"></a>LLEERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ing920.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ing920.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>LLEFUN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ing920.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ing920.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>PMUPDR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ing920.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ing920.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>PMUPVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ing920.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ing920.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>POW_CS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ing920.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ing920.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ing920.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ing920.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>PWM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ing920.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ing920.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>QDEC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ing920.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ing920.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>QDEC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ing920.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ing920.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>QDEC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ing920.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ing920.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>SADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ing920.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ing920.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>SPIFlash_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ing920.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ing920.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TBCU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ing920.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ing920.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>TRNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ing920.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ing920.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ing920.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ing920.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ing920.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ing920.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ing920.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ing920.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>XOREADY_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ing920.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ing920.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_DelayCycles
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetPLLClk
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[77]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
</UL>

<P><STRONG><a name="[46]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_EnableChannel
</UL>

<P><STRONG><a name="[a7]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[35]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[a8]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[a9]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[34]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[83]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_uart
</UL>

<P><STRONG><a name="[aa]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[36]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[76]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>

<P><STRONG><a name="[37]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[3b]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[3c]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[3d]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[ab]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[7e]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[33]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[ac]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[32]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[ad]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[38]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[ae]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[af]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[3a]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[39]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[3e]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[3f]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[7b]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[30]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[b0]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[41]"></a>ASDM_GetFifoCount</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, peripheral_asdm.o(i.ASDM_GetFifoCount))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASDM_IRQHandler
</UL>

<P><STRONG><a name="[42]"></a>ASDM_GetOutData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, peripheral_asdm.o(i.ASDM_GetOutData))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASDM_IRQHandler
</UL>

<P><STRONG><a name="[2b]"></a>ASDM_IRQHandler</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, pdm.o(i.ASDM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ASDM_IRQHandler &rArr; debug_hex &rArr; write_uart_buffer &rArr; uart_send_test
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDM_Enable
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASDM_GetOutData
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASDM_GetFifoCount
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_hex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ing920.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA_ClearChannelIntState</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, peripheral_dma.o(i.DMA_ClearChannelIntState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_ClearChannelIntState
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_IRQHandler
</UL>

<P><STRONG><a name="[45]"></a>DMA_EnableChannel</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, peripheral_dma.o(i.DMA_EnableChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_EnableChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_IRQHandler
</UL>

<P><STRONG><a name="[47]"></a>DMA_GetChannelIntState</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, peripheral_dma.o(i.DMA_GetChannelIntState))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_IRQHandler
</UL>

<P><STRONG><a name="[19]"></a>DMA_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, pdm.o(i.DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA_IRQHandler &rArr; DMA_EnableChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_EnableChannel
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetChannelIntState
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearChannelIntState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ing920.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>GIO_ClearIntStatus</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, peripheral_gpio.o(i.GIO_ClearIntStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GIO_ClearIntStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_IRQHandler
</UL>

<P><STRONG><a name="[49]"></a>GIO_GetIntStatus</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, peripheral_gpio.o(i.GIO_GetIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_IRQHandler
</UL>

<P><STRONG><a name="[d]"></a>GPIO0_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gpio.o(i.GPIO0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = GPIO0_IRQHandler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_GetIntStatus
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_ClearIntStatus
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ing920.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ing920.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>I2C0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, iic_master_920.o(i.I2C0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C0_IRQHandler &rArr; peripherals_i2c_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_i2c_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ing920.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>I2C_ClearIntState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, peripheral_i2c.o(i.I2C_ClearIntState))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_i2c_isr
</UL>

<P><STRONG><a name="[8e]"></a>I2C_CommandWrite</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, peripheral_i2c.o(i.I2C_CommandWrite))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_i2c_isr
</UL>

<P><STRONG><a name="[8a]"></a>I2C_DataRead</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, peripheral_i2c.o(i.I2C_DataRead))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_i2c_isr
</UL>

<P><STRONG><a name="[8c]"></a>I2C_DataWrite</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, peripheral_i2c.o(i.I2C_DataWrite))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_i2c_isr
</UL>

<P><STRONG><a name="[89]"></a>I2C_FifoEmpty</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, peripheral_i2c.o(i.I2C_FifoEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_i2c_isr
</UL>

<P><STRONG><a name="[8b]"></a>I2C_FifoFull</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, peripheral_i2c.o(i.I2C_FifoFull))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_i2c_isr
</UL>

<P><STRONG><a name="[88]"></a>I2C_GetIntState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, peripheral_i2c.o(i.I2C_GetIntState))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_i2c_isr
</UL>

<P><STRONG><a name="[8d]"></a>I2C_IntDisable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, peripheral_i2c.o(i.I2C_IntDisable))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_i2c_isr
</UL>

<P><STRONG><a name="[4d]"></a>KEYSCAN_GetIntStateFifoEmptyRaw</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, peripheral_keyscan.o(i.KEYSCAN_GetIntStateFifoEmptyRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = KEYSCAN_GetIntStateFifoEmptyRaw &rArr; KEYSCAN_reg_read_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEYSCAN_reg_read_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScan_IRQHandler
</UL>

<P><STRONG><a name="[4f]"></a>KEYSCAN_GetKeyData</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, peripheral_keyscan.o(i.KEYSCAN_GetKeyData))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = KEYSCAN_GetKeyData &rArr; KEYSCAN_reg_read_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEYSCAN_reg_read_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScan_IRQHandler
</UL>

<P><STRONG><a name="[50]"></a>KEYSCAN_LoopIntClr</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, peripheral_keyscan.o(i.KEYSCAN_LoopIntClr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = KEYSCAN_LoopIntClr &rArr; KEYSCAN_reg_write_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEYSCAN_reg_write_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScan_IRQHandler
</UL>

<P><STRONG><a name="[b]"></a>KeyScan_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, keyscan_normal.o(i.KeyScan_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = KeyScan_IRQHandler &rArr; key_scan_check &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_uart
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEYSCAN_LoopIntClr
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEYSCAN_GetKeyData
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEYSCAN_GetIntStateFifoEmptyRaw
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_scan_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ing920.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtimer_set_int
</UL>

<P><STRONG><a name="[5c]"></a>PCAP_ReadData</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, peripheral_pwm.o(i.PCAP_ReadData))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM0_IRQHandler
</UL>

<P><STRONG><a name="[44]"></a>PDM_Enable</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, peripheral_asdm.o(i.PDM_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = PDM_Enable &rArr; ASDM_SetRegBit
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASDM_SetRegBit
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASDM_IRQHandler
</UL>

<P><STRONG><a name="[58]"></a>PINCTRL_SelUartRxdIn</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, peripheral_pinctrl.o(i.PINCTRL_SelUartRxdIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = PINCTRL_SelUartRxdIn &rArr; PINCTRL_SelInput &rArr; set_reg_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SelInput
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init_board
</UL>

<P><STRONG><a name="[59]"></a>PINCTRL_SetPadMux</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, peripheral_pinctrl.o(i.PINCTRL_SetPadMux))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = PINCTRL_SetPadMux &rArr; source_id_on_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;source_id_on_pin
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_reg_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init_board
</UL>

<P><STRONG><a name="[22]"></a>PWM0_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, pwm.o(i.PWM0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = PWM0_IRQHandler &rArr; debug_uart &rArr; write_uart_buffer &rArr; uart_send_test
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_uart
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_GetFifoStatus
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCAP_ReadData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ing920.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>PWM_GetFifoStatus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, peripheral_pwm.o(i.PWM_GetFifoStatus))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM0_IRQHandler
</UL>

<P><STRONG><a name="[14]"></a>QSPI_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_flash.o(i.QSPI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = QSPI_IRQHandler &rArr; peripherals_spi_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_spi_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ing920.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>RCMFDTRIM_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, r_timer.o(i.RCMFDTRIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = RCMFDTRIM_IRQHandler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTMR_IntHappened
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTMR_IntClr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ing920.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>RTMR_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, peripheral_timer.o(i.RTMR_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtimer_test
</UL>

<P><STRONG><a name="[5f]"></a>RTMR_IntClr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, peripheral_timer.o(i.RTMR_IntClr))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCMFDTRIM_IRQHandler
</UL>

<P><STRONG><a name="[96]"></a>RTMR_IntEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, peripheral_timer.o(i.RTMR_IntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtimer_init
</UL>

<P><STRONG><a name="[5e]"></a>RTMR_IntHappened</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, peripheral_timer.o(i.RTMR_IntHappened))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCMFDTRIM_IRQHandler
</UL>

<P><STRONG><a name="[95]"></a>RTMR_Reload</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, peripheral_timer.o(i.RTMR_Reload))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtimer_init
</UL>

<P><STRONG><a name="[93]"></a>RTMR_SetCMP</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, peripheral_timer.o(i.RTMR_SetCMP))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtimer_init
</UL>

<P><STRONG><a name="[94]"></a>RTMR_SetOpMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, peripheral_timer.o(i.RTMR_SetOpMode))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtimer_init
</UL>

<P><STRONG><a name="[60]"></a>SEGGER_RTT_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, segger_rtt.o(i.SEGGER_RTT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SEGGER_RTT_Init &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[62]"></a>SEGGER_RTT_Write</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, segger_rtt.o(i.SEGGER_RTT_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
</UL>

<P><STRONG><a name="[63]"></a>SEGGER_RTT_WriteNoLock</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, segger_rtt.o(i.SEGGER_RTT_WriteNoLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>

<P><STRONG><a name="[4a]"></a>SEGGER_RTT_printf</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, segger_rtt_printf.o(i.SEGGER_RTT_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_int_fifo_callback
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_IRQHandler
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCMFDTRIM_IRQHandler
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_scan_check
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScan_IRQHandler
</UL>

<P><STRONG><a name="[67]"></a>SEGGER_RTT_vprintf</STRONG> (Thumb, 522 bytes, Stack size 136 bytes, segger_rtt_printf.o(i.SEGGER_RTT_vprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
</UL>

<P><STRONG><a name="[6b]"></a>SYSCTRL_ClearClkGate</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, peripheral_sysctrl.o(i.SYSCTRL_ClearClkGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SYSCTRL_ClearClkGate &rArr; SYSCTRL_ClkGateCtrl &rArr; set_reg_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClkGateCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClearClkGateMulti
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init_board
</UL>

<P><STRONG><a name="[6d]"></a>SYSCTRL_ClearClkGateMulti</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, peripheral_sysctrl.o(i.SYSCTRL_ClearClkGateMulti))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SYSCTRL_ClearClkGateMulti &rArr; SYSCTRL_ClearClkGate &rArr; SYSCTRL_ClkGateCtrl &rArr; set_reg_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClearClkGate
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init_board
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtimer_init
</UL>

<P><STRONG><a name="[6f]"></a>SYSCTRL_DelayCycles</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, peripheral_sysctrl.o(i.SYSCTRL_DelayCycles))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SYSCTRL_DelayCycles &rArr; SYSCTRL_GetHClk &rArr; SYSCTRL_GetPLLClk &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetHClk
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[70]"></a>SYSCTRL_GetHClk</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, peripheral_sysctrl.o(i.SYSCTRL_GetHClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SYSCTRL_GetHClk &rArr; SYSCTRL_GetPLLClk &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetSlowClk
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetPLLClk
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_safe_divider
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_DelayCycles
</UL>

<P><STRONG><a name="[71]"></a>SYSCTRL_GetPLLClk</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, peripheral_sysctrl.o(i.SYSCTRL_GetPLLClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SYSCTRL_GetPLLClk &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetSlowClk
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetHClk
</UL>

<P><STRONG><a name="[73]"></a>SYSCTRL_GetSlowClk</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, peripheral_sysctrl.o(i.SYSCTRL_GetSlowClk))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetPLLClk
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetHClk
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, timer_delay.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ing920.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, timer_pte.o(i.TIMER0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = TIMER0_IRQHandler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_IntClr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ing920.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, timer_pte.o(i.TIMER1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = TIMER1_IRQHandler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_IntClr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ing920.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>TMR_IntClr</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, peripheral_timer.o(i.TMR_IntClr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TMR_IntClr
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
</UL>

<P><STRONG><a name="[17]"></a>UART0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, uart.o(i.UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = UART0_IRQHandler &rArr; uart_int_fifo_callback &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_int_fifo_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ing920.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>UART_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, peripheral_uart.o(i.UART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_test
</UL>

<P><STRONG><a name="[78]"></a>__0vsnprintf</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[b1]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[b2]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[b3]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[84]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_uart
</UL>

<P><STRONG><a name="[b4]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[b5]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[b6]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[91]"></a>apSSP_ClearIntStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, peripheral_ssp.o(i.apSSP_ClearIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_spi_isr
</UL>

<P><STRONG><a name="[90]"></a>apSSP_GetIntRawStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, peripheral_ssp.o(i.apSSP_GetIntRawStatus))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_spi_isr
</UL>

<P><STRONG><a name="[80]"></a>apUART_BaudRateSet</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, peripheral_uart.o(i.apUART_BaudRateSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = apUART_BaudRateSet
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Initialize
</UL>

<P><STRONG><a name="[9b]"></a>apUART_Check_RXFIFO_EMPTY</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, peripheral_uart.o(i.apUART_Check_RXFIFO_EMPTY))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_int_fifo_callback
</UL>

<P><STRONG><a name="[9d]"></a>apUART_Check_TXFIFO_EMPTY</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, peripheral_uart.o(i.apUART_Check_TXFIFO_EMPTY))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_test
</UL>

<P><STRONG><a name="[9a]"></a>apUART_Get_all_raw_int_stat</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, peripheral_uart.o(i.apUART_Get_all_raw_int_stat))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_int_fifo_callback
</UL>

<P><STRONG><a name="[7f]"></a>apUART_Initialize</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, peripheral_uart.o(i.apUART_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = apUART_Initialize &rArr; apUART_BaudRateSet
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_BaudRateSet
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_uart
</UL>

<P><STRONG><a name="[81]"></a>config_uart</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, uart.o(i.config_uart))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = config_uart &rArr; apUART_Initialize &rArr; apUART_BaudRateSet
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init_board
</UL>

<P><STRONG><a name="[43]"></a>debug_hex</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, debug_print.o(i.debug_hex))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = debug_hex &rArr; write_uart_buffer &rArr; uart_send_test
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_uart_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASDM_IRQHandler
</UL>

<P><STRONG><a name="[52]"></a>debug_uart</STRONG> (Thumb, 52 bytes, Stack size 160 bytes, debug_print.o(i.debug_uart))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = debug_uart &rArr; write_uart_buffer &rArr; uart_send_test
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_uart_buffer
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScan_IRQHandler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM0_IRQHandler
</UL>

<P><STRONG><a name="[53]"></a>key_scan_check</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, keyscan_normal.o(i.key_scan_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = key_scan_check &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScan_IRQHandler
</UL>

<P><STRONG><a name="[2c]"></a>main</STRONG> (Thumb, 154 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = main &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init_board
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtimer_test
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_uart
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_DelayCycles
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[92]"></a>rtimer_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, r_timer.o(i.rtimer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = rtimer_init &rArr; SYSCTRL_ClearClkGateMulti &rArr; SYSCTRL_ClearClkGate &rArr; SYSCTRL_ClkGateCtrl &rArr; set_reg_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClearClkGateMulti
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTMR_SetOpMode
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTMR_SetCMP
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTMR_Reload
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTMR_IntEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtimer_test
</UL>

<P><STRONG><a name="[97]"></a>rtimer_set_int</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, r_timer.o(i.rtimer_set_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rtimer_set_int &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtimer_test
</UL>

<P><STRONG><a name="[87]"></a>rtimer_test</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, r_timer.o(i.rtimer_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = rtimer_test &rArr; rtimer_init &rArr; SYSCTRL_ClearClkGateMulti &rArr; SYSCTRL_ClearClkGate &rArr; SYSCTRL_ClkGateCtrl &rArr; set_reg_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTMR_Enable
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtimer_set_int
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtimer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[86]"></a>uart_init_board</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, uart.o(i.uart_init_board))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = uart_init_board &rArr; PINCTRL_SelUartRxdIn &rArr; PINCTRL_SelInput &rArr; set_reg_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClearClkGateMulti
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SelUartRxdIn
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_uart
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClearClkGate
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SetPadMux
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9c]"></a>uart_send_test</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, uart.o(i.uart_send_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart_send_test
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Check_TXFIFO_EMPTY
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_uart_buffer
</UL>

<P><STRONG><a name="[82]"></a>write_uart_buffer</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, debug_print.o(i.write_uart_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = write_uart_buffer &rArr; uart_send_test
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_test
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_uart
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_hex
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[85]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, main.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[61]"></a>_DoInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, segger_rtt.o(i._DoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
</UL>

<P><STRONG><a name="[64]"></a>_GetAvailWriteSpace</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, segger_rtt.o(i._GetAvailWriteSpace))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[66]"></a>_WriteBlocking</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, segger_rtt.o(i._WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[65]"></a>_WriteNoCheck</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, segger_rtt.o(i._WriteNoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[69]"></a>_PrintInt</STRONG> (Thumb, 236 bytes, Stack size 48 bytes, segger_rtt_printf.o(i._PrintInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
</UL>

<P><STRONG><a name="[6a]"></a>_PrintUnsigned</STRONG> (Thumb, 230 bytes, Stack size 48 bytes, segger_rtt_printf.o(i._PrintUnsigned))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt
</UL>

<P><STRONG><a name="[68]"></a>_StoreChar</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, segger_rtt_printf.o(i._StoreChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt
</UL>

<P><STRONG><a name="[75]"></a>uart_int_fifo_callback</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, uart.o(i.uart_int_fifo_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = uart_int_fifo_callback &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Get_all_raw_int_stat
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Check_RXFIFO_EMPTY
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[4c]"></a>peripherals_i2c_isr</STRONG> (Thumb, 272 bytes, Stack size 16 bytes, iic_master_920.o(i.peripherals_i2c_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = peripherals_i2c_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IntDisable
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetIntState
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_FifoFull
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_FifoEmpty
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DataWrite
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DataRead
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CommandWrite
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ClearIntState
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_IRQHandler
</UL>

<P><STRONG><a name="[5d]"></a>peripherals_spi_isr</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, spi_flash.o(i.peripherals_spi_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = peripherals_spi_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_GetIntRawStatus
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_ClearIntStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_IRQHandler
</UL>

<P><STRONG><a name="[6c]"></a>SYSCTRL_ClkGateCtrl</STRONG> (Thumb, 528 bytes, Stack size 16 bytes, peripheral_sysctrl.o(i.SYSCTRL_ClkGateCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SYSCTRL_ClkGateCtrl &rArr; set_reg_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_reg_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClearClkGate
</UL>

<P><STRONG><a name="[72]"></a>get_safe_divider</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, peripheral_sysctrl.o(i.get_safe_divider))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = get_safe_divider
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetHClk
</UL>

<P><STRONG><a name="[6e]"></a>set_reg_bit</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, peripheral_sysctrl.o(i.set_reg_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = set_reg_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClkGateCtrl
</UL>

<P><STRONG><a name="[55]"></a>PINCTRL_SelInput</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, peripheral_pinctrl.o(i.PINCTRL_SelInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = PINCTRL_SelInput &rArr; set_reg_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_reg_bits
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_id_for_input_source
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SelUartRxdIn
</UL>

<P><STRONG><a name="[57]"></a>pin_id_for_input_source</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, peripheral_pinctrl.o(i.pin_id_for_input_source))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pin_id_for_input_source
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SelInput
</UL>

<P><STRONG><a name="[56]"></a>set_reg_bits</STRONG> (Thumb, 30 bytes, Stack size 20 bytes, peripheral_pinctrl.o(i.set_reg_bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = set_reg_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SetPadMux
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SelInput
</UL>

<P><STRONG><a name="[5a]"></a>source_id_on_pin</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, peripheral_pinctrl.o(i.source_id_on_pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = source_id_on_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SetPadMux
</UL>

<P><STRONG><a name="[4e]"></a>KEYSCAN_reg_read_bits</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, peripheral_keyscan.o(i.KEYSCAN_reg_read_bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = KEYSCAN_reg_read_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEYSCAN_GetKeyData
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEYSCAN_GetIntStateFifoEmptyRaw
</UL>

<P><STRONG><a name="[51]"></a>KEYSCAN_reg_write_bits</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, peripheral_keyscan.o(i.KEYSCAN_reg_write_bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = KEYSCAN_reg_write_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEYSCAN_LoopIntClr
</UL>

<P><STRONG><a name="[54]"></a>ASDM_SetRegBit</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, peripheral_asdm.o(i.ASDM_SetRegBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ASDM_SetRegBit
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDM_Enable
</UL>

<P><STRONG><a name="[7a]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[79]"></a>_printf_core</STRONG> (Thumb, 1704 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
</UL>

<P><STRONG><a name="[7d]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[7c]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2e]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsnprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
